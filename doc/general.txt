1.输入描述:
	less：
		(definition)|(normal selector)|(parametric selector)|(line comment)|(block comment)
		(definition)|(normal selector)|(parametric selector)|(line comment)|(block comment)
		...

	definition：
		"@"(name) ":" (expression) ";"

	normal selector:
		(name) "{"
			(selector body)
		"}"

	parametric selector:
		(name) "(" [ (prameter) [", " (parameter) ...] ] ")"  "{"
			(selector body)
		"}"

	parameter:
		"@"(name) [ ":" (expression)] ";" 

	selector body:
		(definition)|(mixin)|(css rule)
		(definition)|(mixin)|(css rule)
		...

	css rule:
		(name) ":" (expression) ";"

	mixin：
		(name) [ "(" [ (expression) [", " (expression) ...] ] ")"  ]";"

	exprssion: 
		constant， variable和operator的混合（详见数据结构一节）
	对于name的说明：
		name中可以出现@{var}，而且将会被替换为相应变量的值，但是这种情况只会出现在selector的名字中

2.输出描述
	不带@，不带paramatic selector，不带mixin的css


3.处理步骤：
	tokenize：
        	将less源文件转换成内部表示(aka LessBlock), 详见“数据结构”一节
	expand:
		去除所有内部表示中的mixin，paramatic selector
		对mixin的处理，将参入表与实际传入参数替换成相应的声明语句
	eval:
		将所有Expresssion的type变为Constant或string
	output：
		整合输出

4.数据结构：
enum LessElementType {
	DEF,
	NORMAL_SELECTOR,
	PARAMETRIC_SELECTOR,
	BLOCK_COMMENT,
	MIXIN,
	CSS_RULE
};

enum ExprElementType {
	CONSTANT,
	STRING,
	VARIABLE,
	COLOR,
	LEFT_BRACE,
	RIGHT_BRACE,
	OP_AT, 
	OP_ADD,
	OP_SUB,
	OP_MUL,
	OP_DIV,
};

typedef list<struct LessElement> LessBlock; 
typedef vector<struct ExprElement> Expression;

struct LessElement;
struct ExprElement;
struct LessConstant;
struct LessColor;
struct LessDef;
struct LessParam;
struct LessSelector;
struct LessMixin;
struct LessCssRule;

struct LessElement{
	LessElementType type;
        void *data;
};

struct ExprElement {
	ExprElementType type;
        void *data;
};

struct ExprConstant {
	double val;
	string unit;
};

struct LessDef {
	string name;
	Expression expression;
};

struct LessParam {
	string name;
	Expression expression;
};

struct LessColor {
	int r;
	int g;
	int b;
}

struct LessSelector {
	string	name;
	vector<struct LessParam> params;
	LessBlock selector_body;
};

struct LessMixin {
	string name;
	vector<Expression> params;
};

struct LessCssRule {
	string name;
	Expression expression;
};
