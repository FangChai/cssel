关于LessElement的type取值及其对应行为

======================================================================
1.DEF
======================================================================
定义: 形如 
           "@a : 3cm + @@b;" 
的LessElement

data指向的结构: LessDef

LessDef各个字段解释
name : "a"
expression: 储存有 "3cm" "+" "@" "@" "b" 等ExprElement的vector 
=================================
关于ExprElement，见后面的补充说明

======================================================================
2.NORMAL_SELECTOR
======================================================================
定义：形如
            .selector1 {
		...
            }
的LessElement

data指向的结构: LessSelector

LessSelector各个字段解释:
name : ".selector1"
params: 一个空表
selector_body : 一个包含花括号内部所有LessElement的vector

======================================================================
3.PARAMETRIC_SELECTOR
======================================================================
定义: 形如 
           .selector2(@par1:@p + 2, @par2) {
                 ...
           }
的LessElement

data指向: LessSelecor

各个字段解释:
name : ".selector2"
params: 一个存有 "@par1:@p + 2" "@par2" 等LessParm的vector
selector_body : 一个包含花括号内部所有LessElement的vector
=================================
关于LessParam
定义：形如上文中   括号内   "@par1:@p + 2"的一个代码段
字段解释：
name : par1
expression: 存有 "@" "p" "+" "2" 等ExprElement的一个vector

======================================================================
4.BLOCK_COMMENT
======================================================================
定义:形如
          /*
           sfasdl;fjasdlfjsalf;jsadlfjslkdajfkasdj;flk
          */
的一个LessElement

data指向： string

string里面存整个注释块
=================================
关于单行注释：
定义：形如
//dsfasfj;adsfklasjdf;lkajsdfkjsalk;dfjlkadsf
的东西

请直接忽略

======================================================================
5.MIXIN
======================================================================
定义:形如
	.selector2(22+34,45);
的LessElement(参见Less标准中的Mixin相关内容）

data指向: LessMixin

各字段解释:
name : ".selector2"
params : 一个有"22+34" "45"两个Expression的vector

======================================================================
6.CSS_RULE（注意与DEF的区别)
======================================================================
定义:形如
         height:344 + @b + 34cm;
的LessElement

data指向: LessCssRule

各个字段解释:
name: "height"
expression: 一个存有 "334" "@" "b" "34cm" 等 ExprElement的vector

======================================================================
6.LessElement的type的判定方法
======================================================================
从当前位置一直往后读，如果读到下列字符串之一，则进行判断：
	: ( {
如果读到了":", 则为css_rule或def：若当前字符及当前字符后面的字符为@和{, 则为css_rule, 否则为def;
并将"："之前的字符(除去空格)全部视为name，"："之后的字符按表达式读入；

如果读到了"(", 且一直到";"或者"}"之前都没有"{", 则必为mixin；否则为parametric selector；
并将"("之前的字符(除去空格)全部视为name, "("直到")"的内容按param的方式读入；

如果读到了"{":
	若前面为"@",则继续读
	若前面不为"@",可判定为normal selector, 并且这个"{"前面的所有字符串为name
	(不可能为parametric selector，因为如果为parametric selector的话，"("必定在"{"前面,所以读到"("时已经完成了判定)

======================================================================
7.补充：关于表达式处理
======================================================================
=================================
处理步骤
=================================
1.先读取第一个非空格字符，由此判定是否为一整个字符串：
若为 @ 数字 + * / ( 开头，则必定不是字符串；
若为 # 开头, 若有3个或6个合法十六进制字符，则不是字符串；否则为字符串；
若为 r 开头, 判断其是否为rgb()类颜色的合法形式，若是，则不是字符串；否则为字符串；
若为 - 开头，判断其后第一个非空字符是否为@,数字,左括号中任意一个(颜色不能取负，故不能跟#号)，若是，则不是字符串；否则为字符串；
若为其它开头，则为字符串；

2.根据第一步的结果，若为一整个字符串，则将直到分号的内容打包，否则，根据贪婪原则(参见"关于某些元素合法形式的说明"以及"贪婪原则")，按如下规则处理每一元素：
@ : 按OP_AT处理, 且其后的字符串按变量名合法形式处理
# : 按颜色处理
r : 由于已经判断过当前串不可能是字符串，故后面必为rgb()颜色的合法形式，按颜色处理
数字 : 若前面为@,按"@后的string"处理(见下节), 否则按常量处理
( ) +，*，/ : 无歧义，按相应类型处理
- : 若前面为@, 按"@后的string"处理，否则按操作符处理：若前面为空，或为加减乘除，或为左括号，则为负号；否则为减号
其它 : 合法表达式可保证前面必定为@，故按照变量名的合法形式处理

=================================
关于某些元素合法形式的说明
=================================
颜色，#后跟六位或三位合法16进制数(0~9,a~f,A~F)
	或者，"rgb(" + 数字串 + "," + 数字串 + "," + 数字串 + ")"
常量，数字+纯字母组成的串(该串被视为单位)
@后的string，数字字母减号下划线组成的串

=================================
贪婪原则
=================================
以上规则解析时按照贪婪原则，亦即，以每个ExprElement开头的第一个字符及其前后字符判定其类型，并按类型取其后的最大合法串：
以一个例子说明：345add67+ -@345a_3+42-#ffee03

数字，因前面不为@，故按照常量的合法形式式读取最大合法串，读入{val = 345; unit = "aad"}
后一个字符为67，按照贪婪原则，读入{val = 67; unit=""}
OP_ADD
OP_NEG(参照上文提到的判断方法)
OP_AT
按变量名的方式(数字字母减号下划线)读取最大合法串，读入345a_3
OP_ADD
{val = 42; unit = ""}

=================================
具体ExprElement的字段解释
=================================
对于@ + - * / ( ),type分别为
	OP_AT, 
	OP_ADD,
	OP_SUB或OP_NEG  //减号或负号
	OP_MUL,
	OP_DIV,
	LEFT_BRACE,
	RIGHT_BRACE,
（详见关于Operator一节）

对于constant, 如 34px，则data指向LessConstant
val:34
unit:"px"

对于Color，如#ff0203，则data指向LessColor
r:256
g:01
b:03
另外有一种简略记法#rgb，每一位由0~F的数字组成，如#fe4，表示#ffee44
形如rgb(255,16,1)的颜色，等价于#ff1001

对于string,  data指向一个string
string中直接存入字符串内容，若有引号，保留引号，如@@b，被分解为
OP_AT OP_AT b
三个ExprElement,其中b为string

=================================
关于Operator
=================================
单目运算符：OP_AT(@) OP_NEG(-)
双目运算符：OP_MUL(*) OP_DIV(/) OP_ADD(+) OP_SUB(-)
运算结合结合性：单目运算符右结合，双目运算符左结合

=================================
各个数据类型支持的运算以及隐式转换规则
=================================
constant，支持负号
string，支持@运算（变量引用）
color，不支持单目运算

constant与constant，支持加减乘除
constant与color，支持加减乘除
color与color，支持加减乘除

隐式转换：
无单位的constant与有单位的constant进行双目运算时，无单位的constant会隐式转换成带单位的constant，单位与另一操作数一致
constant与color进行运算时，constant单位被抛弃，且被隐式转换为color类型，其rgb分量均为constant的值取整
